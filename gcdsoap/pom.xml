<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.ynm</groupId>
	<artifactId>gcdsoap</artifactId>
	<version>1.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Simple CXF Java-first SOAP project using Spring configuration</name>
	<description>Simple CXF Java-first SOAP project using Spring configuration</description>
	<dependencies>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-frontend-jaxws</artifactId>
			<version>3.1.11</version>
		</dependency>
		<dependency>
			<groupId>org.apache.cxf</groupId>
			<artifactId>cxf-rt-transports-http</artifactId>
			<version>3.1.11</version>
		</dependency>
		<dependency>
			<groupId>com.ynm</groupId>
			<artifactId>gcdcommon</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Apache CXF Code Generation Plugin. This plug-in will generate code 
				for the wsdl specified. We want to execute WSDL data binding as part of Maven's 
				generate sources phase. After you add this, you will need to update the project 
				Maven configuration, then run the generate-sources goal. -->
			<plugin>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-codegen-plugin</artifactId>
				<version>2.7.8</version>
				<executions>
					<execution>
						<id>generate-sources</id>
						<phase>generate-sources</phase>
						<configuration>
							<sourceRoot>src/main/java-generated</sourceRoot>
							<wsdlOptions>
								<wsdlOption>
									<wsdl>${basedir}/src/main/resources/wsdl/gcd.wsdl</wsdl>
									<validate>none</validate>
								</wsdlOption>
							</wsdlOptions>
						</configuration>
						<goals>
							<goal>wsdl2java</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- mvn clean install tomcat:run-war to deploy Look for "Running war 
						on http://xxx" and "Setting the server's publish address to be /yyy" in console 
						output; WSDL browser address will be concatenation of the two: http://xxx/yyy?wsdl -->
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.0</version>
					<executions>
						<execution>
							<id>start-tomcat</id>
							<goals>
								<goal>run-war</goal>
							</goals>
							<phase>pre-integration-test</phase>
							<configuration>
								<port>${test.server.port}</port>
								<path>/webservice</path>
								<fork>true</fork>
								<useSeparateTomcatClassLoader>true</useSeparateTomcatClassLoader>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<configuration>
						<source>1.7</source>
						<target>1.7</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<configuration>
						<projectNameTemplate>[artifactId]-[version]</projectNameTemplate>
						<wtpmanifest>true</wtpmanifest>
						<wtpapplicationxml>true</wtpapplicationxml>
						<wtpversion>2.0</wtpversion>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
